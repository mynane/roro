import qs from 'qs';
import request from '@/utils/request';
import { Res } from '@/types/res';

const servicename = '{{servicename}}';
const modulename = '{{modulename}}';

export type I{{modulename | firstUpper}}List = any;

type TListType = {
  lists: I{{modulename | firstUpper}}List[];
  page: number;
  page_size: number;
};

/**
 * 获取{{modulename}}列表
 * @param values
 * @returns
 */
export async function get{{modulename | firstUpper}}Lists(values: any): Promise<Res<TListType>> {
  return request(`/api/${servicename}/get_${modulename}_list?${qs.stringify(values)}`);
}

/**
 * 获取{{modulename}}详情
 * @param values
 * @returns
 */
export async function get{{modulename | firstUpper}}Detail(values: any): Promise<Res<IList>> {
  return request(`/api/${servicename}/get_${modulename}?${qs.stringify(values)}`);
}

/**
 * 删除{{modulename}}
 * @param values
 * @returns
 */
export async function del{{modulename | firstUpper}}(values: any): Promise<Res<any>> {
  return request(`/api/${servicename}/del_${modulename}`, { method: 'DELETE', body: values });
}

/**
 * 更新{{modulename}}
 * @param values
 * @returns
 */
export async function update{{modulename | firstUpper}}(values: any): Promise<Res<any>> {
  return request(`/api/${servicename}/update_${modulename}`, { method: 'PUT', info: values });
}

/**
 * 创建{{modulename}}
 * @param values
 * @returns
 */
export async function create{{modulename | firstUpper}}(values: any): Promise<Res<any>> {
  return request(`/api/${servicename}/create_${modulename}`, {  method: 'POST', info: values });
}

/**
 * 修改{{modulename}}状态
 * @param values
 * @returns
 */
export async function switch{{modulename | firstUpper}}(values: any): Promise<Res<any>> {
  return request(`/api/${servicename}/switch_${modulename}`, { method: 'PUT', info: values });
}

/**
 * 导出{{modulename}}
 * @param values
 * @returns
 */
export async function export{{modulename | firstUpper}}List(values: any): Promise<any> {
  return request(`/api/${servicename}/export_${modulename}_list`, {
    method: 'POST',
    body: JSON.stringify(values),
    headers: {
      'Content-Type': 'application/json',
    },
    responseType: 'blob',
    getResponse: true,
  })
    .then((res: { data: Blob; response: any }) => {
      let fileName = res.response.headers.get('Content-Disposition').split('=')[1];
      fileName = decodeURIComponent(fileName);
      const a = document.createElement('a');
      const url = window.URL.createObjectURL(res.data);
      a.href = url;
      a.download = fileName;
      a.click();
      window.URL.revokeObjectURL(url);
    })
    .catch(() => {});
}
